/**
 * A simple program that implements substitution cipher.
 * @author Anhua Wu
 * @version 20200413
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class SubstitutionCipher {

    /**
     * Private constants used to shift characters for the substitution cipher.
     */
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";

    /**
     * Constructs a new String where each letter in the String input is shifted
     * by the amount shift to the right, preserving whether the original
     * character was uppercase or lowercase. For example, the String "ABC" with
     * shift 3 would cause this method to return "DEF". A negative value should
     * shift to the left. For example, the String "ABC" with shift -3 would
     * cause this method to return "XYZ". Punctuation, numbers, whitespace and
     * other non-letter characters should be left unchanged. NOTE: For full
     * credit you are REQUIRED to use a StringBuilder to build the String in
     * this method rather than using String concatenation.
     *
     * @param input
     *            String to be encrypted
     * @param shift
     *            Amount to shift each character of input to the right
     * @return the encrypted String as outlined above
     */
    public static String shift(String input, int shift) {
        
        StringBuilder sb = new StringBuilder();
        int inputLen = input.length();
        String[] strShift = new String[inputLen];
        int lettersNum = UPPERCASE.length();
        int i = 0;
        int j = 0;
        int k = 0;
        char currElement;
        char upperCase;
        char lowerCase;
        
        for (i = 0; i < inputLen; i++) {
        
            strShift[i] = input.substring(i,i+1);
            currElement = input.charAt(i);
            
            for (j = 0; j < lettersNum; j++) {
                k = 0;
                upperCase = UPPERCASE.charAt(j);
                lowerCase = LOWERCASE.charAt(j);
            
                if (currElement == upperCase) {
                    k = (j + shift)% (lettersNum);// calculates the index of a shifted character
                    if (k < 0) {
                        k = lettersNum + k;
                        strShift[i] = UPPERCASE.substring(k,k+1);
                    }
                    else if (k >= 0){
                        strShift[i] = UPPERCASE.substring(k,k+1);
                    }
                }
                
                
                else if (currElement == lowerCase) {
                    
                    k = (j + shift)% (lettersNum);
                    if (k < 0) {
                        k = lettersNum + k;
                        strShift[i] = LOWERCASE.substring(k,k+1);
                    }
                    else if (k >= 0) {
                        strShift[i] = LOWERCASE.substring(k,k+1);
                    }
                }
            
            }
          sb.append(strShift[i]);//using append()method to build the new string
        }   

        return sb.toString();
    }

    /**
     * Displays the message "promptMsg" to the user and reads the next full line
     * that the user enters. If the user enters an empty string, reports the
     * error message "ERROR! Empty Input Not Allowed!" and then loops,
     * repeatedly prompting them with "promptMsg" to enter a new string until
     * the user enters a non-empty String
     *
     * @param in
     *            Scanner to read user input from
     * @param promptMsg
     *            Message to display to user to prompt them for input
     * @return the String entered by the user
     */
    public static String promptForString(Scanner in, String promptMsg) {
       
        System.out.print(promptMsg);
        String userIn = in.nextLine();
        int strLen = userIn.length();
        
        while (strLen == 0) {
            System.out.println("ERROR! Empty Input Not Allowed!");
            System.out.print(promptMsg);
            userIn = in.nextLine();
            strLen = userIn.length();
        }
        
        return userIn; 
    }

    /**
     * Opens the file inFile for reading and the file outFile for writing,
     * reading one line at a time from inFile, shifting it the number of
     * characters given by "shift" and writing that line to outFile. If an
     * exception occurs, must report the error message: "ERROR! File inFile not
     * found or cannot write to outFile" where "inFile" and "outFile" are the
     * filenames given as parameters.
     *
     * @param inFile
     *            the file to be transformed
     * @param outFile
     *            the file to write the transformed output to
     * @param shift
     *            the amount to shift the characters from inFile by
     * @return false if an exception occurs and the error message is written,
     *         otherwise true
     */
    public static boolean transformFile(String inFile, String outFile,
            int shift) {
       
        boolean noError = true;
        try {
            File textFile = new File (inFile);
            File outputFile = new File (outFile);
            Scanner textScanner = new Scanner (textFile);
            PrintWriter textWriter = new PrintWriter(outFile);
            
            while(textScanner.hasNext()) {
                String str = textScanner.nextLine();
                String strShift = shift(str,shift);//encode the inFile
                textWriter.println(strShift);
            }
            textScanner.close();
            textWriter.close();
        } catch (FileNotFoundException e) {
            System.out.println("ERROR! File " + inFile + "not fouond or cannot write to" + outFile);
            noError = false;
        }
        return noError;
    }

    /**
     * Prompts the user to enter a single character choice. The only allowable
     * values are 'E', 'D' or 'Q'. All other values are invalid, including all
     * values longer than one character in length, however the user is allowed
     * to enter values in either lower or upper case. If the user enters an
     * invalid value, the method displays the error message "ERROR! Enter a
     * valid value!" and then prompts the user repeatedly until a valid value is
     * entered. Returns a single uppercase character representing the user's
     * choice.
     *
     * @param in
     *            Scanner to read user choices from
     * @param allOptions
     *            true if E and D are allowable inputs, false otherwise
     * @return the user's choice as an uppercase character
     */
public static char getChoice(Scanner in) {
    char[] validArr = {'E','D','Q'};
        System.out.print("Enter your choice: ");
        String userIn = in.nextLine();
        int userInLen = userIn.length();
        int arrLen = validArr.length;
        int i;
        boolean isValid = false;
        
        while(userInLen != 1) {// makes sure the input is a single character
            System.out.println("ERROR! Enter a valid value!");
            System.out.print("Enter your choice: ");
            userIn = in.nextLine();
            userInLen = userIn.length();
            }
        char finalChoice = userIn.charAt(0);
        char userChoice = userIn.toUpperCase().charAt(0);
        for (i = 0; i < arrLen; i++) {
            if (userChoice == validArr[i]) {// compares the input character to valid choices
                isValid = true;
                finalChoice = userChoice;
            }
        }
        while (!isValid) {// when a choice is invalid, prompts the user to enter until the choice is valid
            System.out.print("ERROR! Enter a valid value!");
            System.out.print("Enter your choice: ");
            userIn = in.nextLine();
            userInLen = userIn.length();
            while(userInLen != 1) {
                System.out.print("ERROR! Enter a valid value!");
                System.out.print("Enter your choice: ");
                userIn = in.nextLine();
                userInLen = userIn.length();
                }
            char userChoice1 = userIn.toUpperCase().charAt(0);
            for (i = 0; i < arrLen; i++) {
                if (userChoice1 == validArr[i]) {
                    isValid = true;
                    finalChoice = userChoice1;
                }
            }
        }
        
 
        return finalChoice;
    }

    /**
     * Displays the menu of choices to the user.
     */
    public static void displayMenu() {
        System.out.println("[E]ncode a file");
        System.out.println("[D]ecode a file");
        System.out.println("[Q]uit");
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        displayMenu();
  
        String msg1 = "Enter an input file: ";
        String msg2 = "Enter an output file: ";
        String msg3 = "Enter a shift amount: ";
        String inFile;
        String outFile;
        boolean transform;
        int shift;
        
        char userChoice =  getChoice(in);
        while(userChoice != 'Q') {// keeps running the program until the user choose to quit
            inFile = promptForString(in,msg1);
            outFile = promptForString(in,msg2);
            shift = Integer.parseInt(promptForString(in,msg3));
            transformFile(inFile,outFile,shift);
            transform = transformFile(inFile,outFile,shift);
            if (transform) {// display a message when transform is successful
                System.out.println("Finished writing to file.");
            }
            
            System.out.println();
            displayMenu();
            userChoice = getChoice(in);
        }
        System.out.println("");
        System.out.println("Goodbye!");
        in.close();
    }
}
