/*
 *   A program that plays and scores a round of the game Poker Dice.  In this game,
 *   five dice are rolled.  The player is allowed to select a number of those five dice
 *   to re-roll.  The dice are re-rolled and then scored as if they were a poker hand.
 *   The following hands MUST be correctly scored in this assignment to receive
 *   full credit:
 *      * Highest value x
 *      * One pair
 *      * Two pair
 *      * Three of a kind
 *      * Straight
 *      * Full house
 *      * Four of a kind
 *      * Five of a kind
 *
 * @author Anhua Wu
 * @version 20200405
 */

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class PokerDice {

    /**
     * Prompts the user with a message passed into method and returns true if
     * the user enters a 'Y' and false if the user enters an 'N'. The method
     * should work if the user uses upper or lower case inputs. If the user
     * enters any other value, the method should display an error message and
     * continue prompting until a valid value is entered.
     *
     * @param inScanner
     *            Scanner to provide in put from user
     * @param msg
     *            message to display to prompt the user to enter a value
     * @return
     */
    public static boolean promptToPlay(Scanner inScanner, String msg) {
      
        boolean userChoice = false;
        String userIn;
        int userInLen;
        char userChar;
        System.out.print(msg);
        userIn = inScanner.nextLine();
        userInLen = userIn.length();
        
        
        while(userInLen != 1) {// checks for invalid string input
            System.out.println("ERROR! Only 'Y' and 'N' allowed as input!");
            System.out.print(msg);
            userIn = inScanner.nextLine();
            userInLen = userIn.length();
        }
        if (userInLen == 1) {
            userChar = userIn.toUpperCase().charAt(0);// makes sure lower case inputs are also valid
            while((userChar != 'Y')&&(userChar != 'N')) {
                System.out.println("ERROR! Only 'Y' and 'N' allowed as input!");
                System.out.print(msg);
                userIn = inScanner.nextLine();// update conditions
                userChar = userIn.toUpperCase().charAt(0);
            }
            if (userChar == 'Y') {
                System.out.println();
                userChoice = true;
            }
            else if (userChar == 'N') {
                userChoice = false;
            }
            
        }
        
        return userChoice;
    }

    /**
     * Replaces the zeroes in the array dice with random values between 1 and 6
     * chosen from the Random generator rnd. Then sorts the array so that the
     * values are in sorted order. 
     *
     * @param rnd
     *            generator to pull values from
     * @param dice
     *            array to fill with values.
     */
    public static void rollDice(Random rnd, int[] dice) {
  
        int arrayLen = dice.length;
        int i = 0;
        
        for (i = 0; i < arrayLen ; i++) {
            if (dice[i] == 0) {
                dice[i] = rnd.nextInt(6) + 1;// generates numbers from 1 to 6
            }
        }
        Arrays.sort(dice);

    }

    /**
     * Displays the array dice as the user's current set of die rolls and
     * prompts them to indicate the indices of dice to be re-rolled, one index
     * at a time. If the user enters a -1, the loop ends. If the user enters an
     * invalid index other than -1, the method displays an error message and
     * continues prompting until a valid index or -1 is entered.
     *
     * @param dice
     *            array to set dice to be rerolled
     * @param inScanner
     *            Scanner to provide input from user
     */
    public static void promptForReroll(int[] dice, Scanner inScanner) {
  
        int diceIndex;
        String diceDisplay = "";
        String userIn;
        diceDisplay = Arrays.toString(dice);
        
        
        System.out.println("Your current roll: " + diceDisplay);
        System.out.print("Select a die to re-roll (-1 to keep remaining dice): ");
        userIn = inScanner.nextLine();
        
        diceIndex = Integer.parseInt(userIn);
        
        while (diceIndex != -1){
            if((diceIndex >= 0)&&(diceIndex < dice.length)) {// checks if the given index falls in the valid number range
                dice[diceIndex] = 0;
                diceDisplay = Arrays.toString(dice);
                System.out.println("Your current roll: " + diceDisplay);
                System.out.print("Select a die to re-roll (-1 to keep remaining dice): ");
                userIn = inScanner.nextLine();
                diceIndex = Integer.parseInt(userIn);
            }
            
            else{
                System.out.println("Error: Index must be between 0 and " + (dice.length - 1));
                System.out.println("Your current roll: " + diceDisplay);
                System.out.print("Select a die to re-roll (-1 to keep remaining dice): ") ;
                userIn = inScanner.nextLine();
                diceIndex = Integer.parseInt(userIn);
                }
        }
        ;
        System.out.println("Keeping remaining dice...");
        System.out.println("Rerolling...");
        
    }

    /**
     * Returns an array where each position represents the counts of a value in
     * the array dice. For example, if dice is [1, 2, 3, 3, 5], then this method
     * would return [1, 1, 2, 0, 1, 0] - where index 0 holds the number of 1s,
     * index 1 holds the number of 2s, index 2 holds the number of 3s, etc.
     *
     * @param dice
     *            die rolls to count
     * @return array holding counts of each value in the array dice
     */
    public static int[] getCounts(int[] dice) {
       
        int countsNum = 6;
        int[] counts = {0,0,0,0,0,0};// initialize the counts array
        int diceNum = dice.length;
        int i = 0;
        int j = 0;
        int valCounts = 0;  
   
        int currVal = 0;
        for (i = 0; i < countsNum; i++) {
            currVal = i+1;
            for (j = 0; j < diceNum; j++) {
                if (currVal == dice [j]) {
                    valCounts +=1;
                }
            }
        counts[i] = valCounts;
        valCounts  = 0;
        }
        
        return counts;
    }

    /**
     * Given a SORTED array in increasing order, returns true if the numbers
     * form an unbroken sequence, false otherwise. For example, [1,2,3,4,5]
     * would be true, but [1,2,3,4,6] would be false.
     *
     * @param dice
     *            array sorted in increasing order
     * @return true if values in dice are in an unbroken sequence, false
     *         otherwise
     */
    public static boolean inSequence(int[] dice) {
        
        int i;
        boolean checkSequence = true;
        Arrays.sort(dice);// gets the array sorted first
        for (i = 0; i < dice.length -1; i++) {
            if (dice[i] != dice[i+1]-1 ) {
            checkSequence = false;  
            }
        }
        return checkSequence;
    }

    /**
     * Returns true if value is somewhere in the array, false otherwise
     *
     * @param array
     *            array to search for value
     * @param value
     *            item to look for in the array
     * @return true if value is in array, otherwise false
     */
    public static boolean contains(int[] array, int value) {

        int i;
        boolean containsVal = false;
        
        for (i = 0; i< array.length; i++) {// reads all elements from the array and compares it with the target value
            if (value == array[i]) {
                containsVal = true;
            }
        }
        return containsVal;
    }

    /**
     * Scores the value of the array of dice as a poker hand. Returns a String
     * giving the rank of the hand. See the assignment write-up for details on
     * how the rank string should be formatted.
     *
     * @param dice
     *            die rolls in sorted order
     * @return String holding the rank of the roll in the array dice
     */
    public static String scoreDice(int[] dice) {
     
        String score = "";
        if (contains(getCounts(dice), 5)) {
            score = "Five of a kind";
        }
        else if (contains(getCounts(dice), 4)) {
            score = "Four of a kind";
        }
        else if ((contains(getCounts(dice), 3)) &&(contains(getCounts(dice), 2))) {
            score = "Full house";
        }
        else if (contains(getCounts(dice), 3)) {
            score = "Three of a kind";
        }
        else if (inSequence(dice)) {
            score = "Straight";
        }
        else if (contains(getCounts(dice), 2)) {
            if (contains(getCounts(getCounts(dice)),2)){// checks if there are two 2s in the counts array
            score = "Two pair"; 
            }
            else {// if there is only one 2, that gives us only one pair
                score = "One pair";
            }
        }
        else {
            score = "Highest value " + dice[(dice.length - 1)];
        }
        
        return score;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter a random seed: ");
        int seed = Integer.parseInt(in.nextLine());
        Random rnd = new Random(seed);
        int[] dice = {0,0,0,0,0};
        
        System.out.println("Welcome to the Poker Dice game!");
        System.out.println("Roll 5 dice and try to assemble the best poker hand.");
        String askToPlay = "Would you like to play [Y/N]? ";
        String diceDisplay;
        
        
         if (promptToPlay(in,askToPlay ) != false) {
            rollDice(rnd,dice);
            promptForReroll(dice, in);
            rollDice(rnd,dice);
            diceDisplay = Arrays.toString(dice);
            System.out.println("Your final roll: " + diceDisplay);
            System.out.println(scoreDice(dice));
            
            askToPlay = "Would you like to play again [Y/N]? ";
            
            while(promptToPlay(in,askToPlay) != false) {
                
                int i = 0;
                for (i =0; i < dice.length; i++) {
                    dice[i] = 0;
                }// initialize the dice array so that the rollDice method can function 
                
                rollDice(rnd,dice);
                promptForReroll(dice, in);
                rollDice(rnd,dice);
                diceDisplay = Arrays.toString(dice);
                System.out.println("Your final roll: " + diceDisplay);
                System.out.println(scoreDice(dice));
            }
        }        
        System.out.println();
        System.out.println("Goodbye!");
        in.close();
    }
}
